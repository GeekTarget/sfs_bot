from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.inline import num_of_subscribers, percent, ok, cancel
from states import video

from loader import dp, bot, db

num = "0"
per = "0"
id_video = "0"


async def ask_subscribers(user_id):
    text = "üìà–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ —É —Ç–µ–±—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ :\n\n" \
           "Please choose how many subscribers do you have :"
    await bot.send_message(user_id, text, reply_markup=num_of_subscribers.num_of_subs)


@dp.callback_query_handler(text=["< 100", "< 500", "< 1 000", "< 2 500", "< 5 000", "< 10 000", "< 20 000", "20000+"])
async def ask_percent(call: types.CallbackQuery):
    global num
    num = call.data
    await call.message.edit_reply_markup()
    text = "üìä–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π % :\n\n" \
           "Thanks, now please choose your % :"
    await call.message.edit_text(text, reply_markup=percent.percent_btn)


@dp.callback_query_handler(text=["10%+", "< 10%", "< 5%", "< 2,5%", "< 1%", "< 0.5%"])
async def ask_video(call: types.CallbackQuery):
    global per
    per = call.data
    await call.message.edit_reply_markup()
    text = "‚úî–ë–ª–∞–≥–æ–¥–∞—Ä—é, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é –≤–∞—à–∏ —Å–ª–æ–≤–∞ ( –ø–æ–∫–∞–∂–∏ —Å–≤–æ—é " \
           "—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ %) \n\n" \
           "Thank you, now please send me a video recording of the your screen for confirming your words (show your " \
           "page with the number of subscribers and %) "
    await call.message.edit_text(text, reply_markup=cancel.cancel_btn)
    await video.Video.video_state.set()


@dp.message_handler(content_types=['video'], state=video.Video.video_state)
async def catch_video(message: types.Message, state: FSMContext):
    global id_video
    await state.finish()
    id_video = message.video.file_id
    if message.chat.username is None:
        await message.answer("‚ùå–ß—Ç–æ –±—ã —è —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è sfs –æ—Ç –º–µ–Ω—è, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö "
                             "—Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π username. –ö–∞–∫ —Å–¥–µ–ª–∞–µ—à—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'OK'\n\n"
                             "So that I can send you suggestions for sfs from me, you need in the settings telegram "
                             "specify your username. How do you click on the 'OK' button", reply_markup=ok.ok_btn)
    else:
        if db.check_verification(message.chat.id) == 1:
            await message.answer("‚úî–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                                 "Your account has been successfully updated!")
            db.update_account(message.chat.id, num, per)
        else:
            await message.answer("üéä–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è sfs –æ—Ç –º–µ–Ω—è!\n\n"
                                 "Thank you, now every day you will receive new offers for sfs from me!")
            video_id = message.video.file_id
            db.add_user(message.chat.id, message.chat.username, num, per, video_id)


@dp.message_handler(state=video.Video.video_state)
async def send(message: types.Message):
    await message.answer("‚ùå–ú–Ω–µ –Ω—É–∂–Ω–æ –≤–∏–¥–µ–æ! –ò–Ω–∞—á–µ —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è\n\n"
                         "I need a video! Otherwise, you will not be able to verify", reply_markup=cancel.cancel_btn)


@dp.callback_query_handler(text='OK')
async def check_username(call: types.CallbackQuery):
    if call.message.chat.username is None:
        await call.message.edit_reply_markup()
        await call.message.edit_text("‚ùå–£ –≤–∞—Å –Ω–µ—Ç username. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n\n"
                                     "You don't have a username. Try again!", reply_markup=ok.ok_btn)
    else:
        await call.message.edit_reply_markup()
        if db.check_verification(call.message.chat.id) == 1:
            await call.message.edit_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                                         "Your account has been successfully updated!")
            db.update_account(call.message.chat.id, num, per)
        else:
            await call.message.edit_text(
                "üéä–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è sfs –æ—Ç –º–µ–Ω—è!\n\n"
                "Thank you, now every day you will receive new offers for sfs from me!")
            db.add_user(call.message.chat.id, call.message.chat.username, num, per, id_video)


@dp.callback_query_handler(text='Cancel', state="*")
async def undo_action(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_reply_markup()
    await call.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
